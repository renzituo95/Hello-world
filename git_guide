Git 使用手册
初步规范：
1、权限： 开发同事都为developer，开发负责人为master，运维一个公共管理账号为master
2、主分支master需开发同事提交request，开发负责人需给master 打上tag
3、建立新的projects ，需要开发负责人或者运维同事处理，开发同事不得建立在自己的个人库中
4、现网正在使用的个人库需全部迁移
5、看到有开发同学需要个人测试库，这个也可以规划到公共测试库中
6、现在初步定为以下几个组：
	saas —— saas服务，保留现状
	third_backend —— 为第三方客户的后端服务库，projects 命名规则【现有的不做变更，新增项目请遵守命名规则： servername_客户名，例如：cgi_maolidai、risk_tailong等】
	web —— 所有前端服务库，projects 命名规则【现有的不做变更，新增项目请遵守命名规则： webservername_客户名，例如：web_saas、weixin_saas、web_tailong等,】
	client —— IOS、Android 项目，projects 命名规则自定义
	data —— 数据平台服务的库，projects 命名规则自定义
	devops —— 运维相关项目库
docker —— docker相关项目

										Git安装配置及基本使用
										从官网下载安装包，手动完成安装。
										打开Git Bash命令行工具，执行命令ssh-keygen -t rsa -C Email-Addresss生成一个密钥对。
										登录到GitLab，点击右上角你的用户头像，点击Edit Profile settings，点击SSH Keys，点击Add SSH Key，填写Title栏，复制用户目录下.ssh/id_rsa.pub文件的内容到Key，点击Add Key。
										点击右上角的New project，填写完成后点击Create project新建一个仓库，点击Activity，点击SSH后复制SSH边上栏里的地址。
										打开Git Bash命令行工具，切换到一个合适的目录，使用命令git clone 刚才复制的URL克隆创建的仓库。
										进入目录cd 仓库名，执行命令git config --global user.email "you@example.com"，
										git config --global user.name "your-name"，设置你的个人信息。
										执行命令：
										echo "#Description"> README.md，添加一个文件
										git status，查看当前状态，发现有未跟踪文件
										git add .，当前目录所有文件添加到暂存区
										git diff，比较当前工作区和暂存区有何不同
										git status，查看当前状态，发现有文件未提交
										git commit -m "注释"，把暂存区内容提交到本地仓库
										git push -u origin master，把本地仓库的提交推送到远程仓库
										git log，查看提交日志

										Git本地分支管理

										分支的创建、合并、删除
										git branch，显示所有分支
										git branch b1，从当前分支创建一个叫b1的分支
										git checkout b1，切换到b1分支
										git checkout -b b1，相当于以上两条命令的组合
										git checkout master，切换到master主分支
										git merge b1，把b1分支的代码合并到master上
										git branch -d b1，删除b1分支，不能在被删除分支上执行
										Git Tag标签管理

										标签的创建、删除
										git tag t1，从当前分支创建一个名为t1的标签
										Git push origin t1 或者 git push --tags
										git tag -d t1，删除名为t1的标签
										git push origin :refs/tags/t1

										主要分支（保护分支）
										master 主分支，稳定代码，为生产环境做准备的
										develop 开发分支，为开发服务
										从develop分支创建，用于特性开发，完成后要合并回develop分支
										操作过程：
										git checkout -b newfeature develop，从develop分支创建newfeature特性分支
										git checkout develop，开发完成后，需要合并回develop分支，先切换到develop分支
										git merge --no-ff newfeature，合并回develop分支，必须加--no-ff参数
										git branch -d newfeature，删除特性分支
										git push origin develop，把合并后的develop分支推送到远程仓库
										发布分支
										从develop分支创建，用于预发布版本，允许小bug修复，完成后要合并回develop和master。
										操作过程：
										git checkout -b release-1.2 develop，创建一个发布分支
										git checkout master，切换到master分支，准备合并
										git merge --no-ff release-1.2，把release-1.2分支合并到master分支
										git tag 1.2，从master分支打一个标签
										git checkout develop，切换到develop分支，准备合并
										git merge --no-ff release-1.2，把release-1.2分支合并到develop分支
										git branch -d release-1.2，删除这个发布分支
										修复分支
										从master分支创建，用于生产环境上的Bug修复，完成后要合并回develop和master。
										操作过程：
										git checkout -b hotfix-1.2.1 master，从master分支创建一个Bug修复分支
										git checkout master，切换到master分支，准备合并
										git merge --no-ff hotfix-1.2.1，合并到master分支
										git tag 1.2.1，为master分支创建一个标签
										git checkout develop，切换到develop分支，准备合并
										git merge --no-ff hotfix-1.2.1，合并到develop分支
										git branch -d hotfix-1.2.1，删除hotfix-1.2.1分支
										GitLib权限管理
										GitLib有五种身份权限，分别是：
										Owner 项目所有者，拥有所有的操作权限
										Master 项目的管理者，除更改、删除项目元信息外其它操作均可
										Developer 项目的开发人员，做一些开发工作，对受保护内容无权限
										Reporter 项目的报告者，只有项目的读权限，可以创建代码片断
										Guest 项目的游客，只能提交问题和评论内容
										命名规则
										每次提交必须写明注释，如果是修复Bug，请加上Bug号
										创建特性分支，名称要以f-开头，加上特性名
										创建发布分支，名称要以r-开头，加上预发布版本号
										创建Bug修复分支，名称要以b-开头，加上Bug号
										创建标签，名称要以t-开头，加上发布版本号
										合并分支时必须使用--no-ff参数，以保留合并历史轨迹

										冲突解决：
											user2修改代码并提交了新的请求，但use1在修改代码前没有去pul最新的版本。因此在提交时将会报错。
											user1执行以下命令
											git pull origin master：将远程仓库的最新代码更新到本地仓库
											git mergetool：用来解决冲突，输入vimdiff（一款解决冲突的工具）
											git commit -a：将所有更改提交至本地仓库
											git push origin master：提交到远程仓库并删除以.orig结尾的文件
										更新分支
										git pull origin master
										回滚更新分支操作
										git reset --hard HEAD
										git reset --hard HEAD^

